// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase/Postgres connection
  directUrl = env("DIRECT_URL") // Direct connection for migrations
}

//
// üë§ Users - basic authentication for employees
//
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // hashed password
  createdAt DateTime @default(now())

  // Relations
  salesOrders SalesOrder[] @relation("UserSalesOrders")
  factories   Factory[]     @relation("UserFactories")
  uads        UAD[]         @relation("UserUADs")
  invoices    Invoice[]     @relation("UserInvoices")
  invoiceAggregations InvoiceAggregation[] @relation("UserInvoiceAggregations")
  churnRequests ChurnRequest[] @relation("UserChurnRequests")
}

//
// üìë Sales Order - root record (fetched from Zoho Books)
//
model SalesOrder {
  id           String   @id @default(cuid())
  soNumber     String   @unique
  zohoSoId     String   // Zoho Books salesorder_id
  customerId   String   // Zoho Books customer_id
  customerName String
  startDate    DateTime
  endDate      DateTime
  billingCycle String   // "monthly" | "quarterly" | "halfyearly" | "yearly"
  billingDay   Int?     // only for monthly
  billOnLastDay Boolean @default(false) // if true, cycles end on last day of month
  currencyCode String   @default("INR")
  createdAt    DateTime @default(now())

  // Relations
  createdBy   String
  user        User @relation("UserSalesOrders", fields: [createdBy], references: [id], onDelete: Cascade)

  lineItems   SOProduct[]
  factories   Factory[]
  uads        UAD[]
  invoices    Invoice[]
  invoiceAggregations InvoiceAggregation[]
  churnRequests ChurnRequest[]
}

//
// üõí SO Products - line items inside a Sales Order
//
model SOProduct {
  id         String   @id @default(cuid())
  zohoItemId String   // Zoho Books item_id
  name       String
  qtySo      Int
  rate       Float
  currency   String   @default("INR")

  soId       String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)
}

//
// üè≠ Factory - allocations per SO
//
model Factory {
  id        String   @id @default(cuid())
  name      String
  notes     String?
  createdAt DateTime @default(now())

  soId      String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)

  createdBy String
  user      User @relation("UserFactories", fields: [createdBy], references: [id], onDelete: Cascade)

  allocations FactoryAllocation[]
  uads        UAD[]
  invoices    Invoice[]
}

//
// üì¶ Factory Allocations - subset of SO products
//
model FactoryAllocation {
  id          String   @id @default(cuid())
  zohoItemId  String   // match Zoho's item_id
  productName String
  qtyFactory  Int
  rate        Float

  factoryId   String
  factory     Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

//
// üìÑ UAD - user acceptance docs
//
model UAD {
  id        String   @id @default(cuid())
  uadNumber String   @unique // UAD-001, UAD-002, etc.
  startDate DateTime
  endDate   DateTime
  status    String   @default("Draft") // Draft | Active | Ended
  notes     String?
  createdAt DateTime @default(now())

  soId      String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)

  factoryId String?
  factory   Factory? @relation(fields: [factoryId], references: [id], onDelete: SetNull)

  createdBy String
  user      User @relation("UserUADs", fields: [createdBy], references: [id], onDelete: Cascade)

  lineItems UADLineItem[]
  invoices  Invoice[]
  churnRequests ChurnRequest[]
}

//
// üì¶ UAD Line Items - subset of Factory allocations
//
model UADLineItem {
  id          String   @id @default(cuid())
  zohoItemId  String   // Zoho Books item_id
  productName String
  qtyUad      Int
  rate        Float

  uadId       String
  uad         UAD @relation(fields: [uadId], references: [id], onDelete: Cascade)
}

//
// üí∞ Invoice - generated per UAD per cycle
//
model Invoice {
  id        String   @id @default(cuid())
  externalInvoiceId String?   // Zoho Books invoice_id
  externalInvoiceNumber String? // e.g., "INV-000227"
  invoiceUrl String? // deep link to Zoho invoice
  invoiceDate DateTime
  cycleStart  DateTime
  cycleEnd    DateTime
  prorated    Boolean
  amount      Float
  breakdown   Json?   // proration details
  customFields Json?  // store Factory/UAD identifiers

  soId      String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)

  factoryId String?
  factory   Factory? @relation(fields: [factoryId], references: [id], onDelete: SetNull)

  uadId     String
  uad       UAD @relation(fields: [uadId], references: [id], onDelete: Cascade)

  createdBy String
  user      User @relation("UserInvoices", fields: [createdBy], references: [id], onDelete: Cascade)

  lineItems InvoiceLineItem[]
  aggregations AggregatedInvoice[]
}

//
// üìä Invoice Line Items - detailed quantities and rates
//
model InvoiceLineItem {
  id        String   @id @default(cuid())
  zohoItemId String   // Zoho Books item_id
  productName String
  qty       Float     // may be fractional (prorated)
  rate      Float
  lineAmount Float

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

//
// üîó Invoice Aggregation - groups multiple UAD invoices
//
model InvoiceAggregation {
  id        String   @id @default(cuid())
  name      String   // User-defined name for the aggregation
  status    String   @default("Draft") // Draft | Ready | Synced
  totalAmount Float
  notes     String?
  createdAt DateTime @default(now())
  syncedAt  DateTime?
  externalInvoiceId  String?   // Zoho Books invoice_id when synced
  externalInvoiceNumber String? // e.g., "INV-000227"
  invoiceUrl         String?   // deep link to Zoho invoice
  customFields       Json?     // store UAD breakdown and metadata

  soId      String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)

  createdBy String
  user      User @relation("UserInvoiceAggregations", fields: [createdBy], references: [id], onDelete: Cascade)

  // Relations
  aggregatedInvoices AggregatedInvoice[]
}

//
// üîó Aggregated Invoice - links individual invoices to aggregations
//
model AggregatedInvoice {
  id        String   @id @default(cuid())
  
  aggregationId String
  aggregation   InvoiceAggregation @relation(fields: [aggregationId], references: [id], onDelete: Cascade)
  
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([aggregationId, invoiceId])
}

//
// üîÑ Churn Request - UAD cancellation requests
//
model ChurnRequest {
  id          String   @id @default(cuid())
  churnType   String   // "end_of_period" | "prorated"
  effectiveDate DateTime
  reason      String?
  notes       String?
  status      String   @default("Pending") // Pending | Approved | Processed | Cancelled
  totalRefund Float?   // calculated refund amount for prorated cancellations
  createdAt   DateTime @default(now())
  processedAt DateTime?
  
  // Financial impact calculation
  currentPeriodAmount Float    // amount customer would pay for current period
  refundAmount        Float?   // refund amount (only for prorated)
  newMonthlyAmount    Float    // new monthly amount after churn
  
  soId      String
  salesOrder SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)
  
  uadId     String
  uad       UAD @relation(fields: [uadId], references: [id], onDelete: Cascade)
  
  createdBy String
  user      User @relation("UserChurnRequests", fields: [createdBy], references: [id], onDelete: Cascade)
  
  // Relations
  churnItems ChurnItem[]
}

//
// üì¶ Churn Item - specific items/quantities to cancel
//
model ChurnItem {
  id          String   @id @default(cuid())
  zohoItemId  String   // Zoho Books item_id
  productName String
  qtyToCancel Int      // quantity to cancel
  currentQty  Int      // current quantity in UAD
  rate        Float    // rate per unit
  lineAmount  Float    // qtyToCancel * rate
  
  churnRequestId String
  churnRequest   ChurnRequest @relation(fields: [churnRequestId], references: [id], onDelete: Cascade)
}
