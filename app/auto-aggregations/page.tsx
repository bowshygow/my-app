'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface AutoAggregation {
  id: string;
  name: string;
  status: string;
  totalAmount: number;
  notes?: string;
  createdAt: string;
  syncedAt?: string;
  externalInvoiceId?: string;
  externalInvoiceNumber?: string;
  customFields: {
    autoGenerated: boolean;
    periodKey: string;
    periodStart: string;
    periodEnd: string;
    factoryId?: string;
    factoryName?: string;
    uadId: string;
    invoiceCount: number;
  };
  salesOrder: {
    id: string;
    soNumber: string;
    customerName: string;
  };
  aggregatedInvoices: Array<{
    invoice: {
      id: string;
      amount: number;
      cycleStart: string;
      cycleEnd: string;
    };
  }>;
}

export default function AutoAggregationsPage() {
  const [aggregations, setAggregations] = useState<AutoAggregation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

  useEffect(() => {
    fetchAggregations();
  }, []);

  const fetchAggregations = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/auth/login';
        return;
      }

      const response = await fetch('/api/invoice-aggregations', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const data = await response.json();
        // Filter to show only auto-generated aggregations
        const autoAggregations = data.aggregations?.filter((agg: any) => 
          agg.customFields?.autoGenerated === true
        ) || [];
        setAggregations(autoAggregations);
      } else {
        console.error('Failed to fetch aggregations');
        setError('Failed to load aggregations');
      }
    } catch (error) {
      console.error('Error fetching aggregations:', error);
      setError('Failed to load aggregations');
    } finally {
      setLoading(false);
    }
  };

  const toggleRow = (aggregationId: string) => {
    const newExpandedRows = new Set(expandedRows);
    if (newExpandedRows.has(aggregationId)) {
      newExpandedRows.delete(aggregationId);
    } else {
      newExpandedRows.add(aggregationId);
    }
    setExpandedRows(newExpandedRows);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'ready':
        return 'bg-green-100 text-green-800';
      case 'synced':
        return 'bg-blue-100 text-blue-800';
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading auto-aggregations...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-600 text-6xl mb-4">‚ö†Ô∏è</div>
          <p className="text-xl text-gray-900 mb-2">Error Loading Aggregations</p>
          <p className="text-gray-600">{error}</p>
          <button 
            onClick={fetchAggregations}
            className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-4">
              <Link
                href="/dashboard"
                className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
              >
                ‚Üê Back to Dashboard
              </Link>
              <h1 className="text-3xl font-bold text-gray-900">
                Auto-Aggregations
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-green-600 bg-green-50 px-3 py-1 rounded-full">
                ü§ñ Auto-Generated
              </span>
              <span className="text-sm text-gray-500">
                Created automatically when UADs are saved
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center">
              <div className="text-indigo-600 text-2xl mr-4">üìä</div>
              <div>
                <p className="text-sm font-medium text-gray-600">Total Aggregations</p>
                <p className="text-2xl font-semibold text-gray-900">{aggregations.length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center">
              <div className="text-green-600 text-2xl mr-4">‚úÖ</div>
              <div>
                <p className="text-sm font-medium text-gray-600">Ready for Sync</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {aggregations.filter(agg => agg.status === 'Ready').length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center">
              <div className="text-blue-600 text-2xl mr-4">üîÑ</div>
              <div>
                <p className="text-sm font-medium text-gray-600">Synced</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {aggregations.filter(agg => agg.status === 'Synced').length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center">
              <div className="text-orange-600 text-2xl mr-4">üíµ</div>
              <div>
                <p className="text-sm font-medium text-gray-600">Total Amount</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {formatCurrency(aggregations.reduce((sum, agg) => sum + agg.totalAmount, 0))}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Aggregations List */}
        <div className="bg-white rounded-lg shadow-sm border">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Auto-Generated Aggregations</h3>
            <p className="text-sm text-gray-600 mt-1">
              Click on any row to view detailed breakdown. These are created automatically when UADs are saved.
            </p>
          </div>
          
          {aggregations.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-indigo-600 text-6xl mb-4">üìä</div>
              <p className="text-gray-500 text-lg">No auto-aggregations found</p>
              <p className="text-sm text-gray-400 mt-2">Create a UAD to generate automatic aggregations</p>
              <Link
                href="/uads/new"
                className="mt-4 inline-block bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors"
              >
                Create UAD
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Aggregation Name
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Period
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Factory
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Invoices
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Amount
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {aggregations.map((aggregation) => (
                    <>
                      <tr 
                        key={aggregation.id} 
                        className="hover:bg-gray-50 cursor-pointer"
                        onClick={() => toggleRow(aggregation.id)}
                      >
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">
                            {aggregation.name}
                          </div>
                          <div className="text-xs text-gray-500">
                            {formatDate(aggregation.createdAt)}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {formatDate(aggregation.customFields.periodStart)} - {formatDate(aggregation.customFields.periodEnd)}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {aggregation.customFields.factoryName || 'N/A'}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {aggregation.customFields.invoiceCount} invoices
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">
                            {formatCurrency(aggregation.totalAmount)}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(aggregation.status)}`}>
                            {aggregation.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button 
                            className="text-indigo-600 hover:text-indigo-900"
                            onClick={(e) => {
                              e.stopPropagation();
                              toggleRow(aggregation.id);
                            }}
                          >
                            {expandedRows.has(aggregation.id) ? 'Hide' : 'View'} Details
                          </button>
                        </td>
                      </tr>
                      
                      {/* Expandable Details Row */}
                      {expandedRows.has(aggregation.id) && (
                        <tr>
                          <td colSpan={7} className="px-6 py-4 bg-gray-50">
                            <div className="space-y-4">
                              <div>
                                <h4 className="text-sm font-medium text-gray-900 mb-2">
                                  Aggregation Details
                                </h4>
                                <div className="bg-white border border-gray-200 rounded-lg p-4">
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                    <div>
                                      <p className="text-sm text-gray-600">Sales Order</p>
                                      <p className="text-sm font-medium text-gray-900">
                                        {aggregation.salesOrder.soNumber} - {aggregation.salesOrder.customerName}
                                      </p>
                                    </div>
                                    <div>
                                      <p className="text-sm text-gray-600">UAD ID</p>
                                      <p className="text-sm font-medium text-gray-900">
                                        {aggregation.customFields.uadId}
                                      </p>
                                    </div>
                                    <div>
                                      <p className="text-sm text-gray-600">Period Key</p>
                                      <p className="text-sm font-medium text-gray-900">
                                        {aggregation.customFields.periodKey}
                                      </p>
                                    </div>
                                    <div>
                                      <p className="text-sm text-gray-600">Auto-Generated</p>
                                      <p className="text-sm font-medium text-gray-900">
                                        {aggregation.customFields.autoGenerated ? '‚úÖ Yes' : '‚ùå No'}
                                      </p>
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <p className="text-sm text-gray-600 mb-2">Included Invoices:</p>
                                    <div className="bg-gray-100 rounded p-3">
                                      {aggregation.aggregatedInvoices.map((aggInv, index) => (
                                        <div key={index} className="flex justify-between items-center py-1">
                                          <span className="text-xs text-gray-700">
                                            Invoice {aggInv.invoice.id} - {formatDate(aggInv.invoice.cycleStart)} to {formatDate(aggInv.invoice.cycleEnd)}
                                          </span>
                                          <span className="text-xs font-medium text-gray-900">
                                            {formatCurrency(aggInv.invoice.amount)}
                                          </span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </td>
                        </tr>
                      )}
                    </>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
